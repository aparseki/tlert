function preprocSSsstx( dataLoc, minVal, errStx )
%preprocMPT
%  %imports, removes bad data based on reciprocals, removes NANS, removes negative values, writes Protocol
% minVal is the smallest R value that will be kept
% errRecip is the stacking error in percent
sep = 0.5; %electrode separation, meters
d = importAGI(dataLoc); %auto import fxn generated by MATLAB

D = [(d(:,10)./sep)+1 (d(:,13)./sep)+1 (d(:,16)./sep)+1 (d(:,19)./sep)+1 d(:,5) d(:,6) d(:,8)]; %#, A B M N, R %err, RHOa

abmn = [D(:,1:4)]; %takes electrode locations from raw data
R = D(:,5); %takes resistance from raw data
dat = [abmn R D(:,6)]; %makes a single matrix out of all raw data

%% clen up negative or NaN values
dat_a = sortrows(dat,5); %sort based on coluclcm that will have NaNs
firstD = max(find(dat_a(:,5)<minVal))+1; %finds the last negative val, +1 for first positive value. used to delete negative R vals
lastD = find(~isnan(dat_a(:,5)),1,'last'); %finds the begning of the NaN rows to delete

dat = dat_a(firstD:lastD,:); %take only rows >0 and without NaN R values
%% remove any U% above XX% reciprocal error
cnt = 1;
for i = 1:length(dat)
    if dat(i,6) < errStx % stacking error
        DAT(cnt,:) = [dat(i,1:5)];% loop through and keep all columsn in each row belo threshold
        cnt = cnt+1;
    end
end
data = DAT;

%% assemble r2 protocol.dat
out = zeros(1,5);
radUnc = zeros(1,2);
%for i = 1:length(data)
out = [out; data(:,1:5)];
%end
nums = 1:length(out)-1;
out = [nums' out(2:end,:)];
dataNumber=max(nums);
protocolData = [out];
newfile = [pwd '/protocol.dat'];
dlmwrite(newfile,dataNumber)
dlmwrite(newfile,protocolData,'-append','delimiter','\t')
clear newfile;
fprintf('protocol.dat written\n')

end

